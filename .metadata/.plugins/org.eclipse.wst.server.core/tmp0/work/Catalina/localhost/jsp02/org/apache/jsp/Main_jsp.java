/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.66
 * Generated at: 2021-09-02 09:30:09 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import jsp02.Empleado;
import java.sql.*;
import java.util.*;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

public final class Main_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.google.gson.Gson");
    _jspx_imports_classes.add("jsp02.Empleado");
    _jspx_imports_classes.add("com.google.gson.GsonBuilder");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"ISO-8859-1\">\r\n");
      out.write("<title>Mi JSP</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");

Class.forName("com.mysql.jdbc.Driver");//En references libraries
Class.forName("com.google.gson.Gson");
Class.forName("com.google.gson.GsonBuilder");
try {
	//PASO 1. Crear la conexión a la BBDD
	//Url, usuario y contraseña
	//driver:protocolodriver:/url:puerto/nombreBBDD  usuario  password
	//SHOW VARIABLES WHERE VARIABLE_NAME IN ('hostname', 'port'); Se pone en SQL en MYSQL para saber el nombre y el puerto, de ahí sacamos el 3306 que además es el por defecto para MYSQL
	Connection miConexion = DriverManager.getConnection("jdbc:mysql://localhost:3306/novadevs", "root", ""); //Creamos objeto de tipo Connection
	
	//PASO 2. Creamos el objeto de tipo Statement
	Statement miStatement = miConexion.createStatement(); //Creamos el objeto de tipo Statement
	
	//PASO 3. Ejecutar sentencia SQL
	String sentenciaSql = "SELECT "
			+ "S.NOMBRE AS 'NOMBRE_EMPLEADO', "
			+ "S.ID AS 'ID_EMPLEADO', "
			+ "S.APELLIDO AS 'APELLIDO_EMPLEADO', "
			+ "S.SUPERIOR AS 'ID_JEFE', "
			+ "S.CARGO AS 'CARGO_EMPLEADO', "
			+ "J.NOMBRE AS 'NOMBRE_JEFE', "
			+ "J.APELLIDO AS 'APELLIDO_JEFE', "
			+ "J.CARGO AS 'CARGO_JEFE' "
			+ "FROM JAVA_EMPLEADOS J RIGHT JOIN JAVA_EMPLEADOS S ON S.SUPERIOR = J.ID;"
			;
	ResultSet miResultset = miStatement.executeQuery(sentenciaSql); //Devuelve un Objeto de tipo ResultSet
	//PASO 4. Leer el resulset recorriéndolo
	List<Empleado> dataList = new LinkedList<>();//Lista que contendrá todos los Empleados para el JSON
	while(miResultset.next()) {//mientras haya un registro hacia adelante del cursor nos desplazamos a él y hacemos lo siguiente...
		//Imprimimos por pantalla
		out.print(miResultset.getString("NOMBRE_EMPLEADO")+" ");//RECUPERAMOS A PARTIR DE LOS ALIAS
		out.print(miResultset.getString("APELLIDO_EMPLEADO")+" ");
		out.print(miResultset.getString("CARGO_EMPLEADO")+" ");
		out.print(miResultset.getString("ID_EMPLEADO")+" ");

		out.print(" >  ");
		out.print(miResultset.getString("NOMBRE_JEFE")+" ");
		out.print(miResultset.getString("APELLIDO_JEFE")+" ");
		out.print(miResultset.getString("ID_JEFE")+" "); //SE EXTRAE DEL SUBORDINADO, NO DEL SUPERIOR
		out.println(miResultset.getString("CARGO_JEFE")+" ");
				
		//Convertimos cada empleado en objeto
		Empleado emp = new Empleado(miResultset.getInt("ID_EMPLEADO"), miResultset.getString("NOMBRE_EMPLEADO"), miResultset.getString("APELLIDO_EMPLEADO"), miResultset.getString("CARGO_EMPLEADO"), miResultset.getInt("ID_JEFE") );
		out.println(emp);
		dataList.add(emp);
		//Formateamos cada objeto empleado a Json con Gson
		//Gson gson = new Gson();
	    //System.out.println(gson.toJson(emp));
		Gson gson = new Gson();
		String representacionJSON = gson.toJson(emp);
		System.out.println(representacionJSON);
		//bonito
		Gson prettyGson = new GsonBuilder().setPrettyPrinting().create();
		String representacionBonita = prettyGson.toJson(emp);
		out.println(representacionBonita);
	}
	//Json que contiene todos los empleados en uno sólo json. Los recopila en el List
	Gson gson2 = new Gson();
	String json = gson2.toJson(dataList);
	out.println(json);
}catch(Exception e) {
	out.println("La conexión no se pudo realizar");
	e.printStackTrace();
}

      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
